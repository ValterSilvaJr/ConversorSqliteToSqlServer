// <auto-generated />
using DatabaseEFcore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DatabaseEFcore.Migrations
{
    [DbContext(typeof(databaseContext))]
    partial class databaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DatabaseEFcore.Items", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("title")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("items");
                });

            modelBuilder.Entity("DatabaseEFcore.Points", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnName("city")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnName("image")
                        .HasColumnType("varchar(255)");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Uf")
                        .IsRequired()
                        .HasColumnName("uf")
                        .HasColumnType("varchar(2)");

                    b.Property<string>("Whatsapp")
                        .IsRequired()
                        .HasColumnName("whatsapp")
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.ToTable("points");
                });

            modelBuilder.Entity("DatabaseEFcore.PointsItems", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnName("id")
                        .HasColumnType("bigint");

                    b.Property<long>("ItemId")
                        .HasColumnName("item_id")
                        .HasColumnType("bigint");

                    b.Property<long>("PointId")
                        .HasColumnName("point_id")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PointId");

                    b.ToTable("points_items");
                });

            modelBuilder.Entity("DatabaseEFcore.PointsItems", b =>
                {
                    b.HasOne("DatabaseEFcore.Items", "Item")
                        .WithMany("PointsItems")
                        .HasForeignKey("ItemId")
                        .IsRequired();

                    b.HasOne("DatabaseEFcore.Points", "Point")
                        .WithMany("PointsItems")
                        .HasForeignKey("PointId")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
